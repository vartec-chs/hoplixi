import 'package:flutter/material.dart';
import 'package:hoplixi/common/slider_button.dart';

void main() {
  runApp(const SliderButtonTestApp());
}

class SliderButtonTestApp extends StatelessWidget {
  const SliderButtonTestApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Slider Button Test',
      theme: ThemeData(
        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),
        useMaterial3: true,
      ),
      home: const SliderButtonTestScreen(),
    );
  }
}

class SliderButtonTestScreen extends StatefulWidget {
  const SliderButtonTestScreen({super.key});

  @override
  State<SliderButtonTestScreen> createState() => _SliderButtonTestScreenState();
}

class _SliderButtonTestScreenState extends State<SliderButtonTestScreen> {
  String _lastAction = '–ù–∏–∫–∞–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–∫–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ';

  void _onSlideComplete(String action) {
    setState(() {
      _lastAction = '–í—ã–ø–æ–ª–Ω–µ–Ω–æ: $action';
    });

    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('–í—ã–ø–æ–ª–Ω–µ–Ω–æ: $action'),
        duration: const Duration(seconds: 2),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        backgroundColor: Theme.of(context).colorScheme.inversePrimary,
        title: const Text('Slider Button Test'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            // –ü–æ—Å–ª–µ–¥–Ω–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ
            Card(
              child: Padding(
                padding: const EdgeInsets.all(16.0),
                child: Text(
                  _lastAction,
                  style: Theme.of(context).textTheme.bodyLarge,
                  textAlign: TextAlign.center,
                ),
              ),
            ),

            const SizedBox(height: 24),

            // –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
            Text(
              '–ê–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏:',
              style: Theme.of(context).textTheme.headlineSmall,
            ),

            const SizedBox(height: 16),

            SliderButton(
              type: SliderButtonType.confirm,
              text: '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å',
              onSlideComplete: () => _onSlideComplete('–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ'),
            ),

            const SizedBox(height: 16),

            SliderButton(
              type: SliderButtonType.delete,
              text: '–£–¥–∞–ª–∏—Ç—å',
              onSlideComplete: () => _onSlideComplete('–£–¥–∞–ª–µ–Ω–∏–µ'),
            ),

            const SizedBox(height: 24),

            // –ö–Ω–æ–ø–∫–∏ —Å –∑–∞–≥—Ä—É–∑–∫–æ–π
            Text(
              '–ö–Ω–æ–ø–∫–∏ —Å –∑–∞–≥—Ä—É–∑–∫–æ–π:',
              style: Theme.of(context).textTheme.headlineSmall,
            ),

            const SizedBox(height: 16),

            SliderButton(
              type: SliderButtonType.confirm,
              text: '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å –∑–∞–≥—Ä—É–∑–∫–æ–π',
              showLoading: true,
              onSlideCompleteAsync: () async {
                await Future.delayed(const Duration(seconds: 2));
                _onSlideComplete('–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å –∑–∞–≥—Ä—É–∑–∫–æ–π');
              },
            ),

            const SizedBox(height: 16),

            SliderButton(
              type: SliderButtonType.send,
              text: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å –∑–∞–≥—Ä—É–∑–∫–æ–π',
              showLoading: true,
              onSlideCompleteAsync: () async {
                await Future.delayed(const Duration(seconds: 3));
                _onSlideComplete('–û—Ç–ø—Ä–∞–≤–∫–∞ —Å –∑–∞–≥—Ä—É–∑–∫–æ–π');
              },
            ),

            const SizedBox(height: 24),

            // –û—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
            Text(
              '–û—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ (–ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å + –∏–∫–æ–Ω–∫–∞ –∑–∞–º–æ—á–∫–∞):',
              style: Theme.of(context).textTheme.headlineSmall,
            ),

            const SizedBox(height: 16),

            SliderButton(
              type: SliderButtonType.confirm,
              text: '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å (–æ—Ç–∫–ª—é—á–µ–Ω–æ)',
              enabled: false,
              onSlideComplete: () => _onSlideComplete('–≠—Ç–æ –Ω–µ –¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å'),
            ),

            const SizedBox(height: 16),

            SliderButton(
              type: SliderButtonType.delete,
              text: '–£–¥–∞–ª–∏—Ç—å (–æ—Ç–∫–ª—é—á–µ–Ω–æ)',
              enabled: false,
              onSlideComplete: () => _onSlideComplete('–≠—Ç–æ –Ω–µ –¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å'),
            ),

            const SizedBox(height: 16),

            SliderButton(
              type: SliderButtonType.unlock,
              text: '–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å (–æ—Ç–∫–ª—é—á–µ–Ω–æ)',
              enabled: false,
              onSlideComplete: () => _onSlideComplete('–≠—Ç–æ –Ω–µ –¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å'),
            ),

            const Spacer(),

            // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            Card(
              color: Theme.of(context).colorScheme.surfaceVariant,
              child: Padding(
                padding: const EdgeInsets.all(16.0),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Row(
                      children: [
                        Icon(
                          Icons.info_outline,
                          color: Theme.of(context).colorScheme.primary,
                        ),
                        const SizedBox(width: 8),
                        Text(
                          '–ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ SliderButton:',
                          style: Theme.of(context).textTheme.titleMedium
                              ?.copyWith(
                                color: Theme.of(context).colorScheme.primary,
                              ),
                        ),
                      ],
                    ),
                    const SizedBox(height: 8),
                    Text(
                      'üîÑ –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏:\n'
                      '‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ showLoading: true\n'
                      '‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ onSlideCompleteAsync –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π\n'
                      '‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤ –ø–æ–ª–∑—É–Ω–∫–µ\n'
                      '‚Ä¢ –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –≤ —Ç–µ–∫—Å—Ç–µ\n\n'
                      'üéØ –£–ª—É—á—à–µ–Ω–∏—è –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫:\n'
                      '‚Ä¢ –ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å 50% –¥–ª—è –≤—Å–µ–π –∫–Ω–æ–ø–∫–∏\n'
                      '‚Ä¢ –§–æ–Ω –∫–Ω–æ–ø–∫–∏ —Å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é 30%\n'
                      '‚Ä¢ –ó–∞–ª–∏–≤–∫–∞ –ø—Ä–∏ –¥–≤–∏–∂–µ–Ω–∏–∏ —Å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é 30%\n'
                      '‚Ä¢ –ü–æ–ª–∑—É–Ω–æ–∫ —Å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é 30%\n'
                      '‚Ä¢ –ò–∫–æ–Ω–∫–∞ –∑–∞–º–æ—á–∫–∞ –ø–µ—Ä–µ–¥ —Ç–µ–∫—Å—Ç–æ–º\n'
                      '‚Ä¢ –£–±—Ä–∞–Ω–∞ —Ç–µ–Ω—å —É –ø–æ–ª–∑—É–Ω–∫–∞\n'
                      '‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ä–∞–º–∫–∞ —Å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é 30%',
                      style: Theme.of(context).textTheme.bodyMedium,
                    ),
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}
