import 'package:hoplixi/core/secure_storage/index.dart';
import 'package:hoplixi/core/flutter_secure_storageo_impl.dart';

/// –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–ª—é—á–µ–π –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
///
/// –≠—Ç–æ—Ç —Ñ–∞–π–ª –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç, –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏
/// –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –∫–ª—é—á–µ–π —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞.

class KeyVerificationExamples {
  late final EncryptedKeyValueStorage _storage;

  KeyVerificationExamples() {
    final secureStorage = FlutterSecureStorageImpl();
    _storage = EncryptedKeyValueStorage(
      secureStorage: secureStorage,
      appName: 'hoplixi',
      enableCache: true,
    );
  }

  /// –ü—Ä–∏–º–µ—Ä 1: –ë–∞–∑–æ–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∫–ª—é—á–µ–π
  Future<void> basicUsageExample() async {
    print('=== –ü—Ä–∏–º–µ—Ä 1: –ë–∞–∑–æ–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ ===');

    await _storage.initialize();

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    final testData = {'name': 'Test User', 'age': 25};

    try {
      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ - –∫–ª—é—á –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è
      await _storage.write(
        storageKey: 'user_data',
        key: 'user_1',
        data: testData,
        toJson: (data) => data,
      );
      print('‚úì –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã');

      // –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ - –∫–ª—é—á –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è
      final readData = await _storage.read<Map<String, dynamic>>(
        storageKey: 'user_data',
        key: 'user_1',
        fromJson: (json) => json,
      );
      print('‚úì –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω—ã: $readData');
    } catch (e) {
      print('‚úó –û—à–∏–±–∫–∞: $e');
    }
  }

  /// –ü—Ä–∏–º–µ—Ä 2: –†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
  Future<void> manualKeyVerificationExample() async {
    print('\n=== –ü—Ä–∏–º–µ—Ä 2: –†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–∞ ===');

    const storageKey = 'sensitive_data';

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∫–ª—é—á–∞ –¥–ª—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
      final isValid = await _storage.verifyStorageKey(storageKey);
      print(
        '–ö–ª—é—á –¥–ª—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ "$storageKey" ${isValid ? "–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π" : "–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π"}',
      );

      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
      final status = await _storage.getKeyVerificationStatus(storageKey);
      print('–°—Ç–∞—Ç—É—Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:');
      print('  - –ï—Å—Ç—å –ø–æ–¥–ø–∏—Å—å: ${status.hasSignature}');
      print('  - –í—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${status.registrationTime}');
      print('  - –•–µ—à –ø–æ–¥–ø–∏—Å–∏: ${status.signatureHash?.substring(0, 8)}...');
    } catch (e) {
      print('‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–ª—é—á–∞: $e');
    }
  }

  /// –ü—Ä–∏–º–µ—Ä 3: –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö —Ö—Ä–∞–Ω–∏–ª–∏—â
  Future<void> securityDiagnosticsExample() async {
    print('\n=== –ü—Ä–∏–º–µ—Ä 3: –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ ===');

    try {
      // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
      final diagnostics = await _storage.performSecurityDiagnostics();

      print('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:');
      print('  - –í—Å–µ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â: ${diagnostics.totalStorages}');
      print('  - –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–π: ${diagnostics.validKeys}');
      print('  - –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–π: ${diagnostics.invalidKeys}');
      print('  - –¶–µ–ª—ã—Ö —Ñ–∞–π–ª–æ–≤: ${diagnostics.intactFiles}');
      print('  - –ü–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: ${diagnostics.corruptedFiles}');
      print('  - –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: ${diagnostics.issues.length}');

      // –í—ã–≤–æ–¥–∏–º –¥–µ—Ç–∞–ª–∏ –ø—Ä–æ–±–ª–µ–º
      for (final issue in diagnostics.issues) {
        print(
          '  üö® ${issue.severity.name.toUpperCase()}: ${issue.description}',
        );
      }

      if (diagnostics.issues.isEmpty) {
        print('‚úì –ü—Ä–æ–±–ª–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ');
      }
    } catch (e) {
      print('‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ: $e');
    }
  }

  /// –ü—Ä–∏–º–µ—Ä 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∫–ª—é—á–µ–π —Ö—Ä–∞–Ω–∏–ª–∏—â
  Future<void> verifyAllKeysExample() async {
    print('\n=== –ü—Ä–∏–º–µ—Ä 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∫–ª—é—á–µ–π ===');

    try {
      // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ö—Ä–∞–Ω–∏–ª–∏—â
      final storages = await _storage.getRegisteredStorages();
      print('–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ö—Ä–∞–Ω–∏–ª–∏—â: ${storages.length}');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–∏ –¥–ª—è –≤—Å–µ—Ö —Ö—Ä–∞–Ω–∏–ª–∏—â
      final results = await _storage.verifyAllStorageKeys();

      for (final entry in results.entries) {
        final status = entry.value ? '‚úì' : '‚úó';
        print('  $status ${entry.key}: ${entry.value ? "–û–ö" : "–û–®–ò–ë–ö–ê"}');
      }
    } catch (e) {
      print('‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–ª—é—á–µ–π: $e');
    }
  }

  /// –ü—Ä–∏–º–µ—Ä 5: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞
  Future<void> keyRecoveryExample() async {
    print('\n=== –ü—Ä–∏–º–µ—Ä 5: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–∞ ===');

    const storageKey = 'recovery_test';

    try {
      // –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
      await _storage.write(
        storageKey: storageKey,
        key: 'test_key',
        data: {'test': 'data'},
        toJson: (data) => data,
      );

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
      bool isValid = await _storage.verifyStorageKey(storageKey);
      print('–°—Ç–∞—Ç—É—Å –∫–ª—é—á–∞ –¥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: ${isValid ? "OK" : "–û–®–ò–ë–ö–ê"}');

      // –ï—Å–ª–∏ –∫–ª—é—á –ø–æ–≤—Ä–µ–∂–¥–µ–Ω, –º–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ–≥–æ –ø–µ—Ä–µ—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å
      // –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ —Å–ª–µ–¥—É–µ—Ç –¥–µ–ª–∞—Ç—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –∫–ª—é—á –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π!
      if (!isValid) {
        print('–ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∫–ª—é—á–∞...');
        await _storage.reregisterStorageKey(storageKey);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        isValid = await _storage.verifyStorageKey(storageKey);
        print(
          '–°—Ç–∞—Ç—É—Å –∫–ª—é—á–∞ –ø–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: ${isValid ? "OK" : "–û–®–ò–ë–ö–ê"}',
        );
      }
    } catch (e) {
      print('‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–ª—é—á–∞: $e');
    }
  }

  /// –ü—Ä–∏–º–µ—Ä 6: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–ª—é—á–µ–π
  Future<void> errorHandlingExample() async {
    print('\n=== –ü—Ä–∏–º–µ—Ä 6: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ ===');

    const storageKey = 'error_test';

    try {
      // –ü–æ–ø—ã—Ç–∫–∞ —á—Ç–µ–Ω–∏—è –∏–∑ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
      final data = await _storage.read<Map<String, dynamic>>(
        storageKey: storageKey,
        key: 'nonexistent_key',
        fromJson: (json) => json,
      );
      print('–î–∞–Ω–Ω—ã–µ: $data');
    } on ValidationException catch (e) {
      print('üîí –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–ª—é—á–∞: ${e.message}');
      print('–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
      print('  - –ö–ª—é—á –±—ã–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω');
      print('  - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–ª—é—á');
      print('  - –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∞—Ç–∞–∫–∞ –Ω–∞ —Å–∏—Å—Ç–µ–º—É');
    } on EncryptionException catch (e) {
      print('üîê –û—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: ${e.message}');
    } on SecureStorageException catch (e) {
      print('üíæ –û—à–∏–±–∫–∞ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞: ${e.message}');
    } catch (e) {
      print('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: $e');
    }
  }

  /// –ü—Ä–∏–º–µ—Ä 7: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫–ª—é—á–µ–π
  Future<void> keyMonitoringExample() async {
    print('\n=== –ü—Ä–∏–º–µ—Ä 7: –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–ª—é—á–µ–π ===');

    try {
      // –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–π —Å–Ω–∏–º–æ–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è
      final initialDiagnostics = await _storage.performSecurityDiagnostics();
      print('–ë–∞–∑–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ');

      // –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ö—Ä–∞–Ω–∏–ª–∏—â
      for (int i = 1; i <= 3; i++) {
        await _storage.write(
          storageKey: 'monitor_test_$i',
          key: 'data',
          data: {'index': i, 'timestamp': DateTime.now().toIso8601String()},
          toJson: (data) => data,
        );
      }

      // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π —Å–Ω–∏–º–æ–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è
      final newDiagnostics = await _storage.performSecurityDiagnostics();

      print('–ò–∑–º–µ–Ω–µ–Ω–∏—è:');
      print('  –•—Ä–∞–Ω–∏–ª–∏—â –±—ã–ª–æ: ${initialDiagnostics.totalStorages}');
      print('  –•—Ä–∞–Ω–∏–ª–∏—â —Å—Ç–∞–ª–æ: ${newDiagnostics.totalStorages}');
      print(
        '  –î–æ–±–∞–≤–ª–µ–Ω–æ: ${newDiagnostics.totalStorages - initialDiagnostics.totalStorages}',
      );

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –Ω–æ–≤—ã—Ö –∫–ª—é—á–µ–π
      final keyResults = await _storage.verifyAllStorageKeys();
      final validKeys = keyResults.values.where((v) => v).length;
      print(
        '  –í—Å–µ –∫–ª—é—á–∏ –≤–∞–ª–∏–¥–Ω—ã: ${validKeys == keyResults.length ? "–î–ê" : "–ù–ï–¢"}',
      );
    } catch (e) {
      print('‚úó –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: $e');
    }
  }

  /// –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–∏–º–µ—Ä–æ–≤
  Future<void> runAllExamples() async {
    print('üîê –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –°–ò–°–¢–ï–ú–´ –ü–†–û–í–ï–†–ö–ò –ö–õ–Æ–ß–ï–ô –•–†–ê–ù–ò–õ–ò–©–ê üîê\n');

    await basicUsageExample();
    await manualKeyVerificationExample();
    await securityDiagnosticsExample();
    await verifyAllKeysExample();
    await keyRecoveryExample();
    await errorHandlingExample();
    await keyMonitoringExample();

    print('\n‚úÖ –í—Å–µ –ø—Ä–∏–º–µ—Ä—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã');
  }
}

/// –ü—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
class SecureStorageManager {
  late final EncryptedKeyValueStorage _storage;

  SecureStorageManager({required FlutterSecureStorageImpl secureStorage}) {
    _storage = EncryptedKeyValueStorage(
      secureStorage: secureStorage,
      appName: 'hoplixi',
      enableCache: true,
    );
  }

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
  Future<void> initialize() async {
    await _storage.initialize();

    // –í—ã–ø–æ–ª–Ω—è–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    final diagnostics = await _storage.performSecurityDiagnostics();

    if (diagnostics.issues.isNotEmpty) {
      final criticalIssues = diagnostics.issues
          .where((issue) => issue.severity == SecurityIssueSeverity.critical)
          .toList();

      if (criticalIssues.isNotEmpty) {
        throw SecurityException(
          'Critical security issues detected: ${criticalIssues.length} issues found. '
          'Application cannot start safely.',
        );
      }
    }
  }

  /// –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∫–ª—é—á–∞
  Future<void> saveData<T>({
    required String storageKey,
    required String key,
    required T data,
    required Map<String, dynamic> Function(T) toJson,
  }) async {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
    final isValidKey = await _storage.verifyStorageKey(storageKey);
    if (!isValidKey) {
      final status = await _storage.getKeyVerificationStatus(storageKey);
      if (!status.hasSignature) {
        // –ù–æ–≤–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
        print('Info: Creating new storage: $storageKey');
      } else {
        throw SecurityException(
          'Storage key verification failed for: $storageKey. '
          'Data cannot be saved safely.',
        );
      }
    }

    await _storage.write(
      storageKey: storageKey,
      key: key,
      data: data,
      toJson: toJson,
    );
  }

  /// –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —á—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∫–ª—é—á–∞
  Future<T?> loadData<T>({
    required String storageKey,
    required String key,
    required T Function(Map<String, dynamic>) fromJson,
  }) async {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á –ø–µ—Ä–µ–¥ —á—Ç–µ–Ω–∏–µ–º
    final isValidKey = await _storage.verifyStorageKey(storageKey);
    if (!isValidKey) {
      throw SecurityException(
        'Storage key verification failed for: $storageKey. '
        'Data cannot be read safely.',
      );
    }

    return await _storage.read<T>(
      storageKey: storageKey,
      key: key,
      fromJson: fromJson,
    );
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
  Future<SecurityDiagnostics> getSecurityReport() async {
    return await _storage.performSecurityDiagnostics();
  }

  /// –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
  void dispose() {
    _storage.dispose();
  }
}

/// –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
class SecurityException implements Exception {
  final String message;
  const SecurityException(this.message);

  @override
  String toString() => 'SecurityException: $message';
}
