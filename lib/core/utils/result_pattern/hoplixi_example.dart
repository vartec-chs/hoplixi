import 'package:hoplixi/core/utils/result_pattern/result_pattern.dart';

/// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Result Pattern —Å –æ–±—â–∏–º–∏ —Ç–∏–ø–∞–º–∏ –æ—à–∏–±–æ–∫ Hoplixi

// –ü—Ä–∏–º–µ—Ä –º–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
class Password {
  final String id;
  final String title;
  final String username;
  final String encryptedPassword;

  Password({
    required this.id,
    required this.title,
    required this.username,
    required this.encryptedPassword,
  });
}

// –ü—Ä–∏–º–µ—Ä DAO (–∏–º–∏—Ç–∞—Ü–∏—è)
class PasswordDao {
  Future<Password?> getPasswordById(String id) async {
    await Future.delayed(const Duration(milliseconds: 50));
    if (id == 'not-found') return null;
    return Password(
      id: id,
      title: 'Example',
      username: 'user@example.com',
      encryptedPassword: 'encrypted_data',
    );
  }

  Future<void> insertPassword(Password password) async {
    await Future.delayed(const Duration(milliseconds: 50));
    // –ò–º–∏—Ç–∞—Ü–∏—è —É—Å–ø–µ—Ö–∞
  }

  Future<void> deletePassword(String id) async {
    await Future.delayed(const Duration(milliseconds: 50));
    if (id == 'not-found') {
      throw Exception('Password not found');
    }
  }
}

// –ü—Ä–∏–º–µ—Ä —Å–µ—Ä–≤–∏—Å–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Result Pattern
class PasswordsService {
  final PasswordDao _dao = PasswordDao();

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –ø–æ ID
  Future<Result<Password, DbError>> getPassword(String id) async {
    return ResultConstructors.tryCatchAsync(
      () async {
        final password = await _dao.getPasswordById(id);
        if (password == null) {
          throw DbError.notFound('Password with id $id not found');
        }
        return password;
      },
      (error, stack) {
        if (error is DbError) return error;
        return DbError.query(
          'Failed to get password',
          sql: 'SELECT * FROM passwords WHERE id = ?',
        );
      },
    );
  }

  /// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è
  Future<Result<Password, DbError>> createPassword({
    required String title,
    required String username,
    required String plainPassword,
  }) async {
    return ResultConstructors.tryCatchAsync(
      () async {
        // –í–∞–ª–∏–¥–∞—Ü–∏—è
        if (title.isEmpty) {
          throw DbError.constraint('title_not_empty', 'Title cannot be empty');
        }

        // –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ (–∏–º–∏—Ç–∞—Ü–∏—è)
        final encrypted = 'encrypted_$plainPassword';

        final password = Password(
          id: DateTime.now().millisecondsSinceEpoch.toString(),
          title: title,
          username: username,
          encryptedPassword: encrypted,
        );

        await _dao.insertPassword(password);
        return password;
      },
      (error, stack) {
        if (error is DbError) return error;
        return DbError.insert(
          'Failed to create password',
          details: error.toString(),
        );
      },
    );
  }

  /// –£–¥–∞–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è
  Future<Result<void, DbError>> deletePassword(String id) async {
    return ResultConstructors.tryCatchAsync(
      () async {
        await _dao.deletePassword(id);
      },
      (error, stack) {
        if (error is DbError) return error;
        return DbError.delete(
          'Failed to delete password',
          details: error.toString(),
        );
      },
    );
  }

  /// –ü—Ä–∏–º–µ—Ä —Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏
  Future<Result<Password, DbError>> getPasswordWithFallback(String id) async {
    return getPassword(id).recoverWithAsync((error) async {
      // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∫—ç—à–∞ –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
      print('‚ö†Ô∏è  Recovering from error: ${error.toLogMessage()}');
      return Result.success(
        Password(
          id: 'fallback',
          title: 'Fallback Password',
          username: 'fallback@example.com',
          encryptedPassword: 'encrypted_fallback',
        ),
      );
    });
  }
}

// –ü—Ä–∏–º–µ—Ä —Ä–∞–±–æ—Ç—ã —Å –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π
class CryptoService {
  Future<Result<String, CryptoError>> encrypt(
    String plaintext,
    String key,
  ) async {
    return ResultConstructors.tryCatchAsync(
      () async {
        if (key.length < 8) {
          throw CryptoError.invalidKey('Key must be at least 8 characters');
        }

        await Future.delayed(const Duration(milliseconds: 30));
        // –ò–º–∏—Ç–∞—Ü–∏—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
        return 'encrypted_$plaintext';
      },
      (error, stack) {
        if (error is CryptoError) return error;
        return CryptoError.encryption('Failed to encrypt data');
      },
    );
  }

  Future<Result<String, CryptoError>> decrypt(
    String ciphertext,
    String key,
  ) async {
    return ResultConstructors.tryCatchAsync(
      () async {
        if (!ciphertext.startsWith('encrypted_')) {
          throw CryptoError.invalidFormat('Invalid ciphertext format');
        }

        await Future.delayed(const Duration(milliseconds: 30));
        return ciphertext.substring('encrypted_'.length);
      },
      (error, stack) {
        if (error is CryptoError) return error;
        return CryptoError.decryption('Failed to decrypt data');
      },
    );
  }
}

// –ü—Ä–∏–º–µ—Ä –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
class PasswordManager {
  final PasswordsService _passwordsService = PasswordsService();
  final CryptoService _cryptoService = CryptoService();

  /// –°–æ–∑–¥–∞–Ω–∏–µ –∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è (Railway-oriented)
  Future<Result<Password, AppError>> createEncryptedPassword({
    required String title,
    required String username,
    required String plainPassword,
    required String masterKey,
  }) async {
    // –¶–µ–ø–æ—á–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π: —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ -> —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏
    return _cryptoService
        .encrypt(plainPassword, masterKey)
        .mapErrorAsync(
          (cryptoError) =>
              AppError.unknown('Encryption failed', cause: cryptoError),
        )
        .flatMapAsync((encrypted) async {
          final createResult = await _passwordsService.createPassword(
            title: title,
            username: username,
            plainPassword: encrypted,
          );
          return createResult.mapError(
            (dbError) =>
                AppError.unknown('Database operation failed', cause: dbError),
          );
        });
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –ø–∞—Ä–æ–ª—è
  Future<Result<String, AppError>> getDecryptedPassword(
    String id,
    String masterKey,
  ) async {
    return _passwordsService
        .getPassword(id)
        .mapErrorAsync(
          (dbError) =>
              AppError.unknown('Failed to get password', cause: dbError),
        )
        .flatMapAsync((password) async {
          final decryptResult = await _cryptoService.decrypt(
            password.encryptedPassword,
            masterKey,
          );
          return decryptResult.mapError(
            (cryptoError) =>
                AppError.unknown('Decryption failed', cause: cryptoError),
          );
        });
  }
}

void main() async {
  print('=== Hoplixi Result Pattern Examples ===\n');

  final service = PasswordsService();
  final cryptoService = CryptoService();
  final manager = PasswordManager();

  // –ü—Ä–∏–º–µ—Ä 1: –£—Å–ø–µ—à–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è
  print('--- –ü—Ä–∏–º–µ—Ä 1: –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è ---');
  final createResult = await service.createPassword(
    title: 'Gmail',
    username: 'user@gmail.com',
    plainPassword: 'secret123',
  );

  createResult
      .onSuccess((password) {
        print('‚úÖ –ü–∞—Ä–æ–ª—å —Å–æ–∑–¥–∞–Ω: ${password.title}');
        print('   ID: ${password.id}');
      })
      .onFailure((error) {
        print('‚ùå –û—à–∏–±–∫–∞: ${error.toUserMessage()}');
        print('   –õ–æ–≥: ${error.toLogMessage()}');
      });

  // –ü—Ä–∏–º–µ—Ä 2: –û—à–∏–±–∫–∞ not found
  print('\n--- –ü—Ä–∏–º–µ—Ä 2: Password not found ---');
  final notFoundResult = await service.getPassword('not-found');
  notFoundResult.when(
    success: (password) => print('‚úÖ –ü–∞—Ä–æ–ª—å –Ω–∞–π–¥–µ–Ω: ${password.title}'),
    failure: (error) {
      print('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–∏—Ç: ${error.toUserMessage()}');
      print('üìù –í –ª–æ–≥–∞—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: ${error.toLogMessage()}');
    },
  );

  // –ü—Ä–∏–º–µ—Ä 3: –í–∞–ª–∏–¥–∞—Ü–∏—è
  print('\n--- –ü—Ä–∏–º–µ—Ä 3: –í–∞–ª–∏–¥–∞—Ü–∏—è ---');
  final validationResult = await service.createPassword(
    title: '', // –ü—É—Å—Ç–æ–π title
    username: 'test@test.com',
    plainPassword: 'password',
  );
  validationResult.when(
    success: (_) => print('‚úÖ –°–æ–∑–¥–∞–Ω–æ'),
    failure: (error) => print('‚ùå ${error.toUserMessage()}'),
  );

  // –ü—Ä–∏–º–µ—Ä 3.1: mapAsync —Å FutureOr (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π + –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π)
  print('\n--- –ü—Ä–∏–º–µ—Ä 3.1: mapAsync —Å FutureOr ---');

  // –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä - —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
  final syncMapResult = await service
      .getPassword('test-id')
      .mapAsync((password) => password.title.toUpperCase());

  syncMapResult.when(
    success: (title) => print('‚úÖ Sync transform: $title'),
    failure: (error) => print('‚ùå ${error.toUserMessage()}'),
  );

  // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä - —Ç–µ–ø–µ—Ä—å –Ω–µ –Ω—É–∂–µ–Ω await –≤–Ω—É—Ç—Ä–∏!
  final asyncMapResult = await service.getPassword('test-id').mapAsync((
    password,
  ) async {
    await Future.delayed(Duration(milliseconds: 5));
    return 'üîÑ ${password.title.toUpperCase()}';
  });

  asyncMapResult.when(
    success: (title) => print('‚úÖ Async transform: $title'),
    failure: (error) => print('‚ùå ${error.toUserMessage()}'),
  );

  // mapErrorAsync —Ç–æ–∂–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç FutureOr!
  final errorTransformResult = await service
      .getPassword('not-found')
      .mapErrorAsync((dbError) async {
        await Future.delayed(Duration(milliseconds: 5));
        return AppError.notFound(
          '–¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: ${dbError.message}',
        );
      });

  errorTransformResult.when(
    success: (password) => print('‚úÖ –ù–∞–π–¥–µ–Ω: ${password.title}'),
    failure: (appError) => print('‚ùå ${appError.toUserMessage()}'),
  );

  // –ü—Ä–∏–º–µ—Ä 4: –ö—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—è
  print('\n--- –ü—Ä–∏–º–µ—Ä 4: –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ ---');
  final encryptResult = await cryptoService.encrypt(
    'secret data',
    'masterkey123',
  );
  final encrypted = encryptResult.getOrElse((error) {
    print('‚ùå –û—à–∏–±–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: ${error.toUserMessage()}');
    return 'fallback_encrypted';
  });
  print('‚úÖ –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ: $encrypted');

  final decryptResult = await cryptoService.decrypt(encrypted, 'masterkey123');
  decryptResult.when(
    success: (plain) => print('‚úÖ –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ: $plain'),
    failure: (error) => print('‚ùå ${error.toUserMessage()}'),
  );

  // –ü—Ä–∏–º–µ—Ä 5: –û—à–∏–±–∫–∞ –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏–∏
  print('\n--- –ü—Ä–∏–º–µ—Ä 5: –ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á ---');
  final weakKeyResult = await cryptoService.encrypt('data', 'weak');
  weakKeyResult.when(
    success: (_) => print('‚úÖ –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ'),
    failure: (error) {
      print('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–∏—Ç: ${error.toUserMessage()}');
      print('üìù –í –ª–æ–≥–∞—Ö (–±–µ–∑ —Å–µ–∫—Ä–µ—Ç–æ–≤): ${error.toLogMessage()}');
    },
  );

  // –ü—Ä–∏–º–µ—Ä 6: Railway-oriented programming
  print('\n--- –ü—Ä–∏–º–µ—Ä 6: Railway-oriented ---');
  final combinedResult = await manager.createEncryptedPassword(
    title: 'Bank Account',
    username: 'john@bank.com',
    plainPassword: 'secure_password_123',
    masterKey: 'master_key_strong',
  );

  combinedResult.when(
    success: (password) =>
        print('‚úÖ –ü–∞—Ä–æ–ª—å —Å–æ–∑–¥–∞–Ω –∏ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω: ${password.title}'),
    failure: (error) {
      print('‚ùå –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫: ${error.toUserMessage()}');
      print('üìù –õ–æ–≥: ${error.toLogMessage()}');
    },
  );

  // –ü—Ä–∏–º–µ—Ä 7: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏
  print('\n--- –ü—Ä–∏–º–µ—Ä 7: Recover ---');
  final recoverResult = await service.getPasswordWithFallback('not-found');
  recoverResult.when(
    success: (password) =>
        print('‚úÖ –ü–æ–ª—É—á–µ–Ω –ø–∞—Ä–æ–ª—å (–º–æ–∂–µ—Ç –±—ã—Ç—å fallback): ${password.title}'),
    failure: (error) => print('‚ùå ${error.toUserMessage()}'),
  );

  // –ü—Ä–∏–º–µ—Ä 8: –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  print('\n--- –ü—Ä–∏–º–µ—Ä 8: –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ ---');
  final pass1 = await service.createPassword(
    title: 'Service 1',
    username: 'user1',
    plainPassword: 'pass1',
  );
  final pass2 = await service.createPassword(
    title: 'Service 2',
    username: 'user2',
    plainPassword: 'pass2',
  );

  final combined = ResultConstructors.combine2(pass1, pass2);
  combined.when(
    success: (data) {
      final (password1, password2) = data;
      print('‚úÖ –°–æ–∑–¥–∞–Ω—ã –æ–±–∞ –ø–∞—Ä–æ–ª—è:');
      print('   1. ${password1.title}');
      print('   2. ${password2.title}');
    },
    failure: (error) =>
        print('‚ùå –•–æ—Ç—è –±—ã –æ–¥–∏–Ω –Ω–µ —Å–æ–∑–¥–∞–Ω: ${error.toUserMessage()}'),
  );

  // –ü—Ä–∏–º–µ—Ä 9: Extension –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
  print('\n--- –ü—Ä–∏–º–µ—Ä 9: Error conversion ---');
  try {
    throw Exception('Some database error');
  } catch (e) {
    final appError = e.toAppError('Database operation failed');
    print('Converted to AppError: ${appError.toLogMessage()}');

    final dbError = e.toDbError('Query failed');
    print('Converted to DbError: ${dbError.toLogMessage()}');
  }

  // –ü—Ä–∏–º–µ—Ä 10: Map —Ü–µ–ø–æ—á–∫–∞
  print('\n--- –ü—Ä–∏–º–µ—Ä 10: Map chain ---');
  final chainResult = await service
      .createPassword(title: 'Test', username: 'test', plainPassword: 'pass')
      .mapAsync((password) => password.title.toUpperCase())
      .mapAsync((title) => 'Processed: $title');

  chainResult.when(
    success: (result) => print('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Ü–µ–ø–æ—á–∫–∏: $result'),
    failure: (error) => print('‚ùå ${error.toUserMessage()}'),
  );

  print('\n=== –ü—Ä–∏–º–µ—Ä—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã ===');
}
