import 'package:flutter/material.dart';
import 'package:hoplixi/core/preferences/index.dart';

/// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ä–∞–±–æ—Ç—ã –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
class PreferencesDemo extends StatelessWidget {
  const PreferencesDemo({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Hoplixi Preferences Demo',
      theme: ThemeData(
        colorScheme: ColorScheme.fromSeed(seedColor: Colors.blue),
        useMaterial3: true,
      ),
      home: const DemoHomePage(),
    );
  }
}

class DemoHomePage extends StatefulWidget {
  const DemoHomePage({super.key});

  @override
  State<DemoHomePage> createState() => _DemoHomePageState();
}

class _DemoHomePageState extends State<DemoHomePage> {
  final AppPreferences _prefs = AppPreferences.instance;
  bool _initialized = false;

  @override
  void initState() {
    super.initState();
    _initPreferences();
  }

  Future<void> _initPreferences() async {
    await AppPreferences.init();
    setState(() {
      _initialized = true;
    });
  }

  @override
  Widget build(BuildContext context) {
    if (!_initialized) {
      return const Scaffold(body: Center(child: CircularProgressIndicator()));
    }

    return Scaffold(
      appBar: AppBar(
        title: const Text('Hoplixi Preferences Demo'),
        backgroundColor: Theme.of(context).colorScheme.inversePrimary,
      ),
      body: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
            Card(
              child: Padding(
                padding: const EdgeInsets.all(16),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    const Text(
                      '–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫ Hoplixi',
                      style: TextStyle(
                        fontSize: 18,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    const SizedBox(height: 8),
                    Text(
                      '–ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫: ${_prefs.isFirstLaunch ? "–î–∞" : "–ù–µ—Ç"}',
                    ),
                    Text('–†–µ–∂–∏–º —Ç–µ–º—ã: ${_prefs.themeMode.name}'),
                    Text('–Ø–∑—ã–∫: ${_prefs.language}'),
                    Text(
                      '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫: ${_prefs.getAllSettings().length}',
                    ),
                  ],
                ),
              ),
            ),

            const SizedBox(height: 16),

            // –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
            ElevatedButton.icon(
              onPressed: () {
                Navigator.of(context).push(
                  MaterialPageRoute(
                    builder: (context) => const DynamicSettingsScreen(),
                  ),
                );
              },
              icon: const Icon(Icons.settings),
              label: const Text('–û—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏'),
            ),

            const SizedBox(height: 8),

            ElevatedButton.icon(
              onPressed: () {
                Navigator.of(context).push(
                  MaterialPageRoute(builder: (context) => const SettingsDemo()),
                );
              },
              icon: const Icon(Icons.dashboard),
              label: const Text('–°—Ç–∞—Ä—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è)'),
            ),

            const SizedBox(height: 8),

            ElevatedButton.icon(
              onPressed: _addTestData,
              icon: const Icon(Icons.data_object),
              label: const Text('–î–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ'),
            ),

            const SizedBox(height: 8),

            ElevatedButton.icon(
              onPressed: _showQuickStats,
              icon: const Icon(Icons.info),
              label: const Text('–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É'),
            ),

            const SizedBox(height: 24),

            // –ë—ã—Å—Ç—Ä—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            const Text(
              '–ë—ã—Å—Ç—Ä—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:',
              style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 8),

            SwitchListTile(
              title: const Text('–ë–∏–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è'),
              subtitle: const Text('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Ç–ø–µ—á–∞—Ç–æ–∫ –ø–∞–ª—å—Ü–∞ –∏–ª–∏ Face ID'),
              value: _prefs.isBiometricEnabled,
              onChanged: (value) async {
                await _prefs.setBiometricEnabled(value);
                setState(() {});
              },
            ),

            SwitchListTile(
              title: const Text('–ê–≤—Ç–æ–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞'),
              subtitle: const Text('–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ'),
              value: _prefs.isAutoLockEnabled,
              onChanged: (value) async {
                await _prefs.setAutoLockEnabled(value);
                setState(() {});
              },
            ),

            ListTile(
              title: const Text('–î–ª–∏–Ω–∞ –ø–∞—Ä–æ–ª—è'),
              subtitle: Text('${_prefs.passwordLength} —Å–∏–º–≤–æ–ª–æ–≤'),
              trailing: SizedBox(
                width: 150,
                child: Slider(
                  value: _prefs.passwordLength.toDouble(),
                  min: 4,
                  max: 64,
                  divisions: 60,
                  label: _prefs.passwordLength.toString(),
                  onChanged: (value) async {
                    await _prefs.setPasswordLength(value.round());
                    setState(() {});
                  },
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  Future<void> _addTestData() async {
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    await _prefs.addRecentStore('/test/database1.hpx');
    await _prefs.addRecentStore('/test/database2.hpx');
    await _prefs.addRecentStore('/test/database3.hpx');

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    await _prefs.setDefaultStorePath('/test/default.hpx');
    await _prefs.setAutoBackupEnabled(true);
    await _prefs.setBackupFrequency(3);
    await _prefs.setLastBackupDate(DateTime.now());

    setState(() {});

    if (mounted) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã')),
      );
    }
  }

  void _showQuickStats() {
    final allSettings = _prefs.getAllSettings();
    final registry = PreferencesRegistry.getAllPreferences();
    final categories = PreferencesRegistry.getAllCategories();

    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text('üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏–π: ${categories.length}'),
            Text('‚öôÔ∏è –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–∫: ${registry.length}'),
            Text('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π: ${allSettings.length}'),
            Text(
              '‚ö†Ô∏è –£—Å—Ç–∞—Ä–µ–≤—à–∏—Ö: ${registry.where((p) => p.isDeprecated).length}',
            ),
            Text(
              'üîí –¢–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è: ${registry.where((p) => p.isReadOnly).length}',
            ),
            const SizedBox(height: 16),
            const Text(
              '–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:',
              style: TextStyle(fontWeight: FontWeight.bold),
            ),
            ...categories.map(
              (cat) => Text('‚Ä¢ ${cat.title} (${cat.preferences.length})'),
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: const Text('–ó–∞–∫—Ä—ã—Ç—å'),
          ),
        ],
      ),
    );
  }
}
