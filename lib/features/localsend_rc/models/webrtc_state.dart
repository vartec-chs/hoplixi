import 'package:freezed_annotation/freezed_annotation.dart';
import 'package:hoplixi/features/localsend_rc/models/webrtc_error.dart';

part 'webrtc_state.freezed.dart';
part 'webrtc_state.g.dart';

/// –°–æ—Å—Ç–æ—è–Ω–∏—è WebRTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
enum WebRTCConnectionState {
  /// –ù–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ
  idle,

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
  initializing,

  /// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
  connecting,

  /// –ü–æ–¥–∫–ª—é—á–µ–Ω–æ
  connected,

  /// –û—Ç–∫–ª—é—á–µ–Ω–∏–µ
  disconnecting,

  /// –û—Ç–∫–ª—é—á–µ–Ω–æ
  disconnected,

  /// –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  failed,

  /// –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
  reconnecting,
}

/// –†–∞—Å—à–∏—Ä–µ–Ω–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ WebRTC
extension WebRTCConnectionStateExtension on WebRTCConnectionState {
  /// –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–º (–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ)
  bool get isActive {
    switch (this) {
      case WebRTCConnectionState.connecting:
      case WebRTCConnectionState.connected:
      case WebRTCConnectionState.reconnecting:
        return true;
      default:
        return false;
    }
  }

  /// –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω–µ—á–Ω—ã–º (—É—Å–ø–µ—Ö –∏–ª–∏ –Ω–µ—É–¥–∞—á–∞)
  bool get isTerminal {
    switch (this) {
      case WebRTCConnectionState.connected:
      case WebRTCConnectionState.failed:
      case WebRTCConnectionState.disconnected:
        return true;
      default:
        return false;
    }
  }

  /// –ú–æ–∂–Ω–æ –ª–∏ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
  bool get canReconnect {
    switch (this) {
      case WebRTCConnectionState.failed:
      case WebRTCConnectionState.disconnected:
        return true;
      default:
        return false;
    }
  }

  /// –û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  String get displayName {
    switch (this) {
      case WebRTCConnectionState.idle:
        return '–ù–µ –∞–∫—Ç–∏–≤–Ω–æ';
      case WebRTCConnectionState.initializing:
        return '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...';
      case WebRTCConnectionState.connecting:
        return '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...';
      case WebRTCConnectionState.connected:
        return '–ü–æ–¥–∫–ª—é—á–µ–Ω–æ';
      case WebRTCConnectionState.disconnecting:
        return '–û—Ç–∫–ª—é—á–µ–Ω–∏–µ...';
      case WebRTCConnectionState.disconnected:
        return '–û—Ç–∫–ª—é—á–µ–Ω–æ';
      case WebRTCConnectionState.failed:
        return '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è';
      case WebRTCConnectionState.reconnecting:
        return '–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...';
    }
  }

  /// –ò–∫–æ–Ω–∫–∞ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
  String get icon {
    switch (this) {
      case WebRTCConnectionState.idle:
        return '‚ö™';
      case WebRTCConnectionState.initializing:
        return 'üîÑ';
      case WebRTCConnectionState.connecting:
        return 'üü°';
      case WebRTCConnectionState.connected:
        return 'üü¢';
      case WebRTCConnectionState.disconnecting:
        return 'üü†';
      case WebRTCConnectionState.disconnected:
        return '‚ö´';
      case WebRTCConnectionState.failed:
        return 'üî¥';
      case WebRTCConnectionState.reconnecting:
        return 'üîÑ';
    }
  }
}

/// –î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ WebRTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
@freezed
abstract class WebRTCConnectionStatus with _$WebRTCConnectionStatus {
  const factory WebRTCConnectionStatus({
    /// –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    required WebRTCConnectionState state,

    /// –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
    WebRTCError? error,

    /// –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    DateTime? lastStateChange,

    /// –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    @Default(0) int reconnectAttempts,

    /// –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è)
    Duration? connectionDuration,

    /// –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    DateTime? connectionStartTime,

    /// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    Map<String, dynamic>? metadata,
  }) = _WebRTCConnectionStatus;

  factory WebRTCConnectionStatus.fromJson(Map<String, dynamic> json) =>
      _$WebRTCConnectionStatusFromJson(json);
}

/// –†–∞—Å—à–∏—Ä–µ–Ω–∏—è –¥–ª—è WebRTCConnectionStatus
extension WebRTCConnectionStatusExtension on WebRTCConnectionStatus {
  /// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
  WebRTCConnectionStatus copyWithState(
    WebRTCConnectionState newState, {
    WebRTCError? error,
    Map<String, dynamic>? metadata,
  }) {
    final now = DateTime.now();

    return copyWith(
      state: newState,
      error: error,
      lastStateChange: now,
      connectionStartTime: newState == WebRTCConnectionState.connecting
          ? now
          : connectionStartTime,
      connectionDuration:
          newState == WebRTCConnectionState.connected &&
              connectionStartTime != null
          ? now.difference(connectionStartTime!)
          : connectionDuration,
      metadata: metadata,
    );
  }

  /// –£–≤–µ–ª–∏—á–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  WebRTCConnectionStatus incrementReconnectAttempts() {
    return copyWith(reconnectAttempts: reconnectAttempts + 1);
  }

  /// –°–±—Ä–æ—Å–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  WebRTCConnectionStatus resetReconnectAttempts() {
    return copyWith(reconnectAttempts: 0);
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
  Duration? get timeSinceLastChange {
    if (lastStateChange == null) return null;
    return DateTime.now().difference(lastStateChange!);
  }

  /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –æ—à–∏–±–∫–∞
  bool get hasError => error != null;

  /// –ü–æ–ª—É—á–∏—Ç—å —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  String get description {
    final baseDescription = state.displayName;

    if (hasError) {
      return '$baseDescription: ${error!.message}';
    }

    if (state == WebRTCConnectionState.connected &&
        connectionDuration != null) {
      final duration = connectionDuration!;
      final minutes = duration.inMinutes;
      final seconds = duration.inSeconds % 60;
      return '$baseDescription (${minutes}–º ${seconds}—Å)';
    }

    if (reconnectAttempts > 0) {
      return '$baseDescription (–ø–æ–ø—ã—Ç–∫–∞ $reconnectAttempts)';
    }

    return baseDescription;
  }
}
