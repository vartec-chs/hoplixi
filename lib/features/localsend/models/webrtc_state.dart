import 'package:flutter_webrtc/flutter_webrtc.dart';
import 'package:freezed_annotation/freezed_annotation.dart';

part 'webrtc_state.freezed.dart';

@freezed
abstract class WebrtcState with _$WebrtcState {
  const factory WebrtcState({
    required RTCPeerConnectionState pcState, // —Å–æ—Å—Ç–æ—è–Ω–∏–µ PeerConnection
    required RTCIceConnectionState iceState, // —Å–æ—Å—Ç–æ—è–Ω–∏–µ ICE —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    required RTCDataChannelState dcState, // —Å–æ—Å—Ç–æ—è–Ω–∏–µ DataChannel
    required List<Map<String, dynamic>> messages,
    required bool isConnected,
  }) = _WebrtcState;

  factory WebrtcState.initial() => const WebrtcState(
    pcState: RTCPeerConnectionState.RTCPeerConnectionStateNew,
    iceState: RTCIceConnectionState.RTCIceConnectionStateNew,
    dcState: RTCDataChannelState.RTCDataChannelClosed,
    messages: [],
    isConnected: false,
  );
}

/// –†–∞—Å—à–∏—Ä–µ–Ω–∏—è –¥–ª—è RTCPeerConnectionState
extension RTCPeerConnectionStateExtension on RTCPeerConnectionState {
  /// –û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  String get displayName {
    switch (this) {
      case RTCPeerConnectionState.RTCPeerConnectionStateNew:
        return '–ù–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ';
      case RTCPeerConnectionState.RTCPeerConnectionStateConnecting:
        return '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...';
      case RTCPeerConnectionState.RTCPeerConnectionStateConnected:
        return '–ü–æ–¥–∫–ª—é—á–µ–Ω–æ';
      case RTCPeerConnectionState.RTCPeerConnectionStateDisconnected:
        return '–û—Ç–∫–ª—é—á–µ–Ω–æ';
      case RTCPeerConnectionState.RTCPeerConnectionStateFailed:
        return '–û—à–∏–±–∫–∞';
      case RTCPeerConnectionState.RTCPeerConnectionStateClosed:
        return '–ó–∞–∫—Ä—ã—Ç–æ';
    }
  }

  /// –ò–∫–æ–Ω–∫–∞ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
  String get icon {
    switch (this) {
      case RTCPeerConnectionState.RTCPeerConnectionStateNew:
        return '‚ö™';
      case RTCPeerConnectionState.RTCPeerConnectionStateConnecting:
        return 'üü°';
      case RTCPeerConnectionState.RTCPeerConnectionStateConnected:
        return 'üü¢';
      case RTCPeerConnectionState.RTCPeerConnectionStateDisconnected:
        return 'üü†';
      case RTCPeerConnectionState.RTCPeerConnectionStateFailed:
        return 'üî¥';
      case RTCPeerConnectionState.RTCPeerConnectionStateClosed:
        return '‚ö´';
    }
  }

  /// –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–º
  bool get isActive {
    return this == RTCPeerConnectionState.RTCPeerConnectionStateConnected ||
        this == RTCPeerConnectionState.RTCPeerConnectionStateConnecting;
  }

  /// –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å–ø–µ—à–Ω—ã–º
  bool get isSuccess =>
      this == RTCPeerConnectionState.RTCPeerConnectionStateConnected;

  /// –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—à–∏–±–æ—á–Ω—ã–º
  bool get isError =>
      this == RTCPeerConnectionState.RTCPeerConnectionStateFailed;
}

/// –†–∞—Å—à–∏—Ä–µ–Ω–∏—è –¥–ª—è RTCIceConnectionState
extension RTCIceConnectionStateExtension on RTCIceConnectionState {
  /// –û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  String get displayName {
    switch (this) {
      case RTCIceConnectionState.RTCIceConnectionStateNew:
        return 'ICE: –ù–æ–≤–æ–µ';
      case RTCIceConnectionState.RTCIceConnectionStateChecking:
        return 'ICE: –ü—Ä–æ–≤–µ—Ä–∫–∞...';
      case RTCIceConnectionState.RTCIceConnectionStateConnected:
        return 'ICE: –ü–æ–¥–∫–ª—é—á–µ–Ω–æ';
      case RTCIceConnectionState.RTCIceConnectionStateCompleted:
        return 'ICE: –ó–∞–≤–µ—Ä—à–µ–Ω–æ';
      case RTCIceConnectionState.RTCIceConnectionStateFailed:
        return 'ICE: –û—à–∏–±–∫–∞';
      case RTCIceConnectionState.RTCIceConnectionStateDisconnected:
        return 'ICE: –û—Ç–∫–ª—é—á–µ–Ω–æ';
      case RTCIceConnectionState.RTCIceConnectionStateClosed:
        return 'ICE: –ó–∞–∫—Ä—ã—Ç–æ';
      default:
        return 'ICE: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    }
  }

  /// –ò–∫–æ–Ω–∫–∞ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
  String get icon {
    switch (this) {
      case RTCIceConnectionState.RTCIceConnectionStateNew:
        return '‚ö™';
      case RTCIceConnectionState.RTCIceConnectionStateChecking:
        return 'üîÑ';
      case RTCIceConnectionState.RTCIceConnectionStateConnected:
        return 'üü¢';
      case RTCIceConnectionState.RTCIceConnectionStateCompleted:
        return '‚úÖ';
      case RTCIceConnectionState.RTCIceConnectionStateFailed:
        return 'üî¥';
      case RTCIceConnectionState.RTCIceConnectionStateDisconnected:
        return 'üü†';
      case RTCIceConnectionState.RTCIceConnectionStateClosed:
        return '‚ö´';
      default:
        return '‚ùì';
    }
  }

  /// –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–º
  bool get isActive {
    return this == RTCIceConnectionState.RTCIceConnectionStateConnected ||
        this == RTCIceConnectionState.RTCIceConnectionStateChecking ||
        this == RTCIceConnectionState.RTCIceConnectionStateCompleted;
  }

  /// –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å–ø–µ—à–Ω—ã–º
  bool get isSuccess {
    return this == RTCIceConnectionState.RTCIceConnectionStateConnected ||
        this == RTCIceConnectionState.RTCIceConnectionStateCompleted;
  }

  /// –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—à–∏–±–æ—á–Ω—ã–º
  bool get isError => this == RTCIceConnectionState.RTCIceConnectionStateFailed;
}

/// –†–∞—Å—à–∏—Ä–µ–Ω–∏—è –¥–ª—è RTCDataChannelState
extension RTCDataChannelStateExtension on RTCDataChannelState {
  /// –û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  String get displayName {
    switch (this) {
      case RTCDataChannelState.RTCDataChannelConnecting:
        return '–ö–∞–Ω–∞–ª: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...';
      case RTCDataChannelState.RTCDataChannelOpen:
        return '–ö–∞–Ω–∞–ª: –û—Ç–∫—Ä—ã—Ç';
      case RTCDataChannelState.RTCDataChannelClosing:
        return '–ö–∞–Ω–∞–ª: –ó–∞–∫—Ä—ã—Ç–∏–µ...';
      case RTCDataChannelState.RTCDataChannelClosed:
        return '–ö–∞–Ω–∞–ª: –ó–∞–∫—Ä—ã—Ç';
    }
  }

  /// –ò–∫–æ–Ω–∫–∞ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
  String get icon {
    switch (this) {
      case RTCDataChannelState.RTCDataChannelConnecting:
        return 'üü°';
      case RTCDataChannelState.RTCDataChannelOpen:
        return 'üü¢';
      case RTCDataChannelState.RTCDataChannelClosing:
        return 'üü†';
      case RTCDataChannelState.RTCDataChannelClosed:
        return '‚ö´';
    }
  }

  /// –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–∞–Ω–∞–ª –æ—Ç–∫—Ä—ã—Ç—ã–º –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö
  bool get canSend => this == RTCDataChannelState.RTCDataChannelOpen;

  /// –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–º
  bool get isActive =>
      this == RTCDataChannelState.RTCDataChannelOpen ||
      this == RTCDataChannelState.RTCDataChannelConnecting;
}

/// –†–∞—Å—à–∏—Ä–µ–Ω–∏—è –¥–ª—è WebrtcState
extension WebrtcStateExtension on WebrtcState {
  /// –û–±—â–µ–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  String get overallStatus {
    if (isConnected && dcState.canSend) {
      return '–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∏ –≥–æ—Ç–æ–≤–æ';
    } else if (isConnected) {
      return '–ü–æ–¥–∫–ª—é—á–µ–Ω–æ, –æ–∂–∏–¥–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞';
    } else if (pcState.isActive || iceState.isActive) {
      return '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...';
    } else if (pcState.isError || iceState.isError) {
      return '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è';
    } else {
      return '–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ';
    }
  }

  /// –û–±—â–∞—è –∏–∫–æ–Ω–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  String get overallIcon {
    if (isConnected && dcState.canSend) {
      return 'üü¢';
    } else if (isConnected) {
      return 'üü°';
    } else if (pcState.isActive || iceState.isActive) {
      return 'üîÑ';
    } else if (pcState.isError || iceState.isError) {
      return 'üî¥';
    } else {
      return '‚ö™';
    }
  }

  /// –ì–æ—Ç–æ–≤ –ª–∏ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π
  bool get isReadyToSend => isConnected && dcState.canSend;

  /// –ï—Å—Ç—å –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
  bool get hasMessages => messages.isNotEmpty;

  /// –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
  int get messageCount => messages.length;

  /// –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
  Map<String, dynamic>? get lastMessage =>
      messages.isNotEmpty ? messages.last : null;

  /// –°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  List<Map<String, dynamic>> get myMessages =>
      messages.where((msg) => msg['from'] == 'me').toList();

  /// –°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç peer
  List<Map<String, dynamic>> get peerMessages =>
      messages.where((msg) => msg['from'] == 'peer').toList();

  /// –°–∏—Å—Ç–µ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  List<Map<String, dynamic>> get systemMessages =>
      messages.where((msg) => msg['from'] == 'system').toList();

  /// –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
  String get detailedStatus {
    return '''
PeerConnection: ${pcState.displayName} ${pcState.icon}
ICE: ${iceState.displayName} ${iceState.icon}
DataChannel: ${dcState.displayName} ${dcState.icon}
–ü–æ–¥–∫–ª—é—á–µ–Ω–æ: ${isConnected ? '–î–∞' : '–ù–µ—Ç'}
–°–æ–æ–±—â–µ–Ω–∏–π: $messageCount
–ì–æ—Ç–æ–≤ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ: ${isReadyToSend ? '–î–∞' : '–ù–µ—Ç'}
'''
        .trim();
  }

  /// –ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞ –¥–ª—è UI
  String get statusSummary {
    final status = overallStatus;
    final icon = overallIcon;
    final msgCount = hasMessages ? ' ($messageCount)' : '';
    return '$icon $status$msgCount';
  }
}
