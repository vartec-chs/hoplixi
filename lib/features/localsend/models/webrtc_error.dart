import 'package:freezed_annotation/freezed_annotation.dart';

part 'webrtc_error.freezed.dart';
part 'webrtc_error.g.dart';

/// –¢–∏–ø—ã –æ—à–∏–±–æ–∫ WebRTC
enum WebRTCErrorType {
  /// –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞
  networkError,

  /// –û—à–∏–±–∫–∞ —Å–∏–≥–Ω–∞–ª–∏–Ω–≥–∞
  signalingError,

  /// –û—à–∏–±–∫–∞ ICE –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  iceConnectionFailed,

  /// –û—à–∏–±–∫–∞ –∫–∞–Ω–∞–ª–∞ –¥–∞–Ω–Ω—ã—Ö
  dataChannelError,

  /// –¢–∞–π–º–∞—É—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
  timeout,

  /// –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  initializationError,

  /// –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è/–æ—Ç–≤–µ—Ç–∞
  sdpError,

  /// –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞
  unknown,
}

/// –†–∞—Å—à–∏—Ä–µ–Ω–∏—è –¥–ª—è —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫
extension WebRTCErrorTypeExtension on WebRTCErrorType {
  /// –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—à–∏–±–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π (–Ω–µ –ø–æ–¥–ª–µ–∂–∏—Ç –ø–æ–≤—Ç–æ—Ä—É)
  bool get isCritical {
    switch (this) {
      case WebRTCErrorType.initializationError:
      case WebRTCErrorType.sdpError:
        return true;
      case WebRTCErrorType.networkError:
      case WebRTCErrorType.signalingError:
      case WebRTCErrorType.iceConnectionFailed:
      case WebRTCErrorType.dataChannelError:
      case WebRTCErrorType.timeout:
      case WebRTCErrorType.unknown:
        return false;
    }
  }

  /// –ú–æ–∂–Ω–æ –ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é –ø—Ä–∏ –¥–∞–Ω–Ω–æ–π –æ—à–∏–±–∫–µ
  bool get canRetry => !isCritical;

  /// –û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
  String get displayName {
    switch (this) {
      case WebRTCErrorType.networkError:
        return '–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞';
      case WebRTCErrorType.signalingError:
        return '–û—à–∏–±–∫–∞ —Å–∏–≥–Ω–∞–ª–∏–Ω–≥–∞';
      case WebRTCErrorType.iceConnectionFailed:
        return '–û—à–∏–±–∫–∞ ICE –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è';
      case WebRTCErrorType.dataChannelError:
        return '–û—à–∏–±–∫–∞ –∫–∞–Ω–∞–ª–∞ –¥–∞–Ω–Ω—ã—Ö';
      case WebRTCErrorType.timeout:
        return '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è';
      case WebRTCErrorType.initializationError:
        return '–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏';
      case WebRTCErrorType.sdpError:
        return '–û—à–∏–±–∫–∞ SDP';
      case WebRTCErrorType.unknown:
        return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
    }
  }

  /// –ò–∫–æ–Ω–∫–∞ –¥–ª—è —Ç–∏–ø–∞ –æ—à–∏–±–∫–∏
  String get icon {
    switch (this) {
      case WebRTCErrorType.networkError:
        return 'üåê';
      case WebRTCErrorType.signalingError:
        return 'üì°';
      case WebRTCErrorType.iceConnectionFailed:
        return 'üßä';
      case WebRTCErrorType.dataChannelError:
        return 'üìä';
      case WebRTCErrorType.timeout:
        return '‚è∞';
      case WebRTCErrorType.initializationError:
        return 'üö´';
      case WebRTCErrorType.sdpError:
        return 'üìù';
      case WebRTCErrorType.unknown:
        return '‚ùì';
    }
  }
}

/// –ú–æ–¥–µ–ª—å –æ—à–∏–±–∫–∏ WebRTC
@freezed
abstract class WebRTCError with _$WebRTCError {
  const factory WebRTCError({
    /// –¢–∏–ø –æ—à–∏–±–∫–∏
    required WebRTCErrorType type,

    /// –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
    required String message,

    /// –í—Ä–µ–º—è –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –æ—à–∏–±–∫–∏
    required DateTime timestamp,

    /// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–± –æ—à–∏–±–∫–µ
    Map<String, dynamic>? details,

    /// –°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
    String? stackTrace,
  }) = _WebRTCError;

  factory WebRTCError.fromJson(Map<String, dynamic> json) =>
      _$WebRTCErrorFromJson(json);

  /// –°–æ–∑–¥–∞—Ç—å –æ—à–∏–±–∫—É —Å–µ—Ç–∏
  factory WebRTCError.network(String message, {Map<String, dynamic>? details}) {
    return WebRTCError(
      type: WebRTCErrorType.networkError,
      message: message,
      timestamp: DateTime.now(),
      details: details,
    );
  }

  /// –°–æ–∑–¥–∞—Ç—å –æ—à–∏–±–∫—É —Å–∏–≥–Ω–∞–ª–∏–Ω–≥–∞
  factory WebRTCError.signaling(
    String message, {
    Map<String, dynamic>? details,
  }) {
    return WebRTCError(
      type: WebRTCErrorType.signalingError,
      message: message,
      timestamp: DateTime.now(),
      details: details,
    );
  }

  /// –°–æ–∑–¥–∞—Ç—å –æ—à–∏–±–∫—É ICE –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  factory WebRTCError.iceConnection(
    String message, {
    Map<String, dynamic>? details,
  }) {
    return WebRTCError(
      type: WebRTCErrorType.iceConnectionFailed,
      message: message,
      timestamp: DateTime.now(),
      details: details,
    );
  }

  /// –°–æ–∑–¥–∞—Ç—å –æ—à–∏–±–∫—É –∫–∞–Ω–∞–ª–∞ –¥–∞–Ω–Ω—ã—Ö
  factory WebRTCError.dataChannel(
    String message, {
    Map<String, dynamic>? details,
  }) {
    return WebRTCError(
      type: WebRTCErrorType.dataChannelError,
      message: message,
      timestamp: DateTime.now(),
      details: details,
    );
  }

  /// –°–æ–∑–¥–∞—Ç—å –æ—à–∏–±–∫—É —Ç–∞–π–º–∞—É—Ç–∞
  factory WebRTCError.timeout(String message, {Map<String, dynamic>? details}) {
    return WebRTCError(
      type: WebRTCErrorType.timeout,
      message: message,
      timestamp: DateTime.now(),
      details: details,
    );
  }

  /// –°–æ–∑–¥–∞—Ç—å –æ—à–∏–±–∫—É –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  factory WebRTCError.initialization(
    String message, {
    Map<String, dynamic>? details,
  }) {
    return WebRTCError(
      type: WebRTCErrorType.initializationError,
      message: message,
      timestamp: DateTime.now(),
      details: details,
    );
  }

  /// –°–æ–∑–¥–∞—Ç—å –æ—à–∏–±–∫—É SDP
  factory WebRTCError.sdp(String message, {Map<String, dynamic>? details}) {
    return WebRTCError(
      type: WebRTCErrorType.sdpError,
      message: message,
      timestamp: DateTime.now(),
      details: details,
    );
  }

  /// –°–æ–∑–¥–∞—Ç—å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—É—é –æ—à–∏–±–∫—É
  factory WebRTCError.unknown(String message, {Map<String, dynamic>? details}) {
    return WebRTCError(
      type: WebRTCErrorType.unknown,
      message: message,
      timestamp: DateTime.now(),
      details: details,
    );
  }

  /// –°–æ–∑–¥–∞—Ç—å –æ—à–∏–±–∫—É –∏–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
  factory WebRTCError.fromException(
    Exception exception, {
    WebRTCErrorType? type,
    Map<String, dynamic>? details,
  }) {
    return WebRTCError(
      type: type ?? WebRTCErrorType.unknown,
      message: exception.toString(),
      timestamp: DateTime.now(),
      details: details,
      stackTrace: StackTrace.current.toString(),
    );
  }
}

/// –†–∞—Å—à–∏—Ä–µ–Ω–∏—è –¥–ª—è WebRTCError
extension WebRTCErrorExtension on WebRTCError {
  /// –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
  String get fullDescription {
    final typeDescription = type.displayName;
    return '$typeDescription: $message';
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
  String get userMessage {
    switch (type) {
      case WebRTCErrorType.networkError:
        return '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞';
      case WebRTCErrorType.signalingError:
        return '–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–≤—è–∑—å —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º';
      case WebRTCErrorType.iceConnectionFailed:
        return '–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä—è–º–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ';
      case WebRTCErrorType.dataChannelError:
        return '–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö';
      case WebRTCErrorType.timeout:
        return '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è';
      case WebRTCErrorType.initializationError:
        return '–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ';
      case WebRTCErrorType.sdpError:
        return '–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è';
      case WebRTCErrorType.unknown:
        return '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
    }
  }

  /// –ú–æ–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  bool get canShowTechnicalDetails => details != null && details!.isNotEmpty;

  /// –ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è —Å –º–æ–º–µ–Ω—Ç–∞ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –æ—à–∏–±–∫–∏
  Duration get age => DateTime.now().difference(timestamp);
}
