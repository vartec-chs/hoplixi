import 'package:freezed_annotation/freezed_annotation.dart';
import 'package:flutter_webrtc/flutter_webrtc.dart';

part 'connection.freezed.dart';
part 'connection.g.dart';

/// –°–æ—Å—Ç–æ—è–Ω–∏–µ WebRTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
enum WebRTCConnectionState {
  /// –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è
  initializing,

  /// –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  connecting,

  /// –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
  connected,

  /// –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–∑—Ä—ã–≤–∞–µ—Ç—Å—è
  disconnecting,

  /// –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–∑–æ—Ä–≤–∞–Ω–æ
  disconnected,

  /// –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  failed,
}

/// –†–æ–ª—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤ WebRTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏
enum WebRTCRole {
  /// –ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (—Å–æ–∑–¥–∞–µ—Ç offer)
  caller,

  /// –ü—Ä–∏–Ω–∏–º–∞—é—â–∏–π —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ (—Å–æ–∑–¥–∞–µ—Ç answer)
  callee,
}

/// –¢–∏–ø WebRTC —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è –æ–±–º–µ–Ω–∞ —á–µ—Ä–µ–∑ HTTP
enum SignalingMessageType {
  /// SDP offer
  offer,

  /// SDP answer
  answer,

  /// ICE –∫–∞–Ω–¥–∏–¥–∞—Ç
  iceCandidate,

  /// –ü–∏–Ω–≥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  ping,

  /// –ó–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  bye,
}

/// –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è WebRTC —Å–∏–≥–Ω–∞–ª–∏–Ω–≥–∞
@freezed
abstract class SignalingMessage with _$SignalingMessage {
  const factory SignalingMessage({
    /// –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
    required SignalingMessageType type,

    /// ID –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    required String fromDeviceId,

    /// ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è
    required String toDeviceId,

    /// –î–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (SDP, ICE candidate –∏ —Ç.–¥.)
    required Map<String, dynamic> data,

    /// –í—Ä–µ–º–µ–Ω–Ω–∞—è –º–µ—Ç–∫–∞
    required DateTime timestamp,

    /// –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è
    required String messageId,
  }) = _SignalingMessage;

  factory SignalingMessage.fromJson(Map<String, dynamic> json) =>
      _$SignalingMessageFromJson(json);
}

/// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ WebRTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏
@freezed
abstract class WebRTCConnection with _$WebRTCConnection {
  const factory WebRTCConnection({
    /// ID —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    required String connectionId,

    /// ID –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    required String localDeviceId,

    /// ID —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    required String remoteDeviceId,

    /// –†–æ–ª—å –≤ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏
    required WebRTCRole role,

    /// –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    @Default(WebRTCConnectionState.initializing) WebRTCConnectionState state,

    /// –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    required DateTime createdAt,

    /// –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    DateTime? lastActivity,

    /// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    Map<String, dynamic>? stats,

    /// –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    String? errorMessage,
  }) = _WebRTCConnection;

  factory WebRTCConnection.fromJson(Map<String, dynamic> json) =>
      _$WebRTCConnectionFromJson(json);
}

/// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è WebRTC
class WebRTCConfig {
  /// ICE —Å–µ—Ä–≤–µ—Ä—ã –¥–ª—è STUN/TURN
  static const List<Map<String, dynamic>> iceServers = [
    {
      'urls': ['stun:stun.l.google.com:19302', 'stun:stun1.l.google.com:19302'],
    },
  ];

  /// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è DataChannel
  static RTCDataChannelInit get dataChannelConfig => RTCDataChannelInit()
    ..id = 1
    ..ordered = true
    ..protocol = 'sctp'
    ..negotiated = false;

  /// –†–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ —Ñ–∞–π–ª–æ–≤ (64KB)
  static const int fileChunkSize = 64 * 1024;

  /// –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥–∞—á —Ñ–∞–π–ª–æ–≤
  static const int maxConcurrentTransfers = 3;

  /// –¢–∞–π–º–∞—É—Ç –¥–ª—è WebRTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
  static const int connectionTimeout = 30;

  /// –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø–∏–Ω–≥–∞ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
  static const int pingInterval = 10;
}

/// –†–∞—Å—à–∏—Ä–µ–Ω–∏—è –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —Ä–∞–±–æ—Ç—ã —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º–∏
extension WebRTCConnectionExtension on WebRTCConnection {
  /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–∫—Ç–∏–≤–Ω–æ –ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
  bool get isActive => state == WebRTCConnectionState.connected;

  /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –æ—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  bool get hasFailed => state == WebRTCConnectionState.failed;

  /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
  bool get isConnecting =>
      state == WebRTCConnectionState.connecting ||
      state == WebRTCConnectionState.initializing;

  /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–≤–µ—Ä—à–µ–Ω–æ –ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
  bool get isDisconnected => state == WebRTCConnectionState.disconnected;

  /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∫–æ–Ω–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  String get stateIcon {
    switch (state) {
      case WebRTCConnectionState.initializing:
      case WebRTCConnectionState.connecting:
        return 'üîÑ';
      case WebRTCConnectionState.connected:
        return 'üü¢';
      case WebRTCConnectionState.disconnecting:
        return 'üî∂';
      case WebRTCConnectionState.disconnected:
        return '‚ö™';
      case WebRTCConnectionState.failed:
        return 'üî¥';
    }
  }

  /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  String get stateDescription {
    switch (state) {
      case WebRTCConnectionState.initializing:
        return '–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è';
      case WebRTCConnectionState.connecting:
        return '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ';
      case WebRTCConnectionState.connected:
        return '–ü–æ–¥–∫–ª—é—á–µ–Ω–æ';
      case WebRTCConnectionState.disconnecting:
        return '–û—Ç–∫–ª—é—á–µ–Ω–∏–µ';
      case WebRTCConnectionState.disconnected:
        return '–û—Ç–∫–ª—é—á–µ–Ω–æ';
      case WebRTCConnectionState.failed:
        return '–û—à–∏–±–∫–∞';
    }
  }

  /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∏—Å—Ö–æ–¥—è—â–∏–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º
  bool get isOutgoing => role == WebRTCRole.caller;

  /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –≤—Ö–æ–¥—è—â–∏–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º
  bool get isIncoming => role == WebRTCRole.callee;

  /// –í—ã—á–∏—Å–ª—è–µ—Ç –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  Duration get connectionDuration {
    final endTime = lastActivity ?? DateTime.now();
    return endTime.difference(createdAt);
  }
}
