import 'package:hoplixi/core/lib/oauth2restclient/oauth2restclient.dart';
import 'package:hoplixi/features/auth/services/services.dart';
import 'package:hoplixi/core/utils/toastification.dart';

/// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∞—Ä—Ö–∏–≤–æ–≤
class SyncExample {
  late final SyncMetadataService _metadataService;
  late final DropboxService _dropboxService;

  SyncExample(OAuth2RestClient? client) {
    _metadataService = SyncMetadataService();
    _dropboxService = DropboxService(client);
  }

  /// –ü—Ä–∏–º–µ—Ä —ç–∫—Å–ø–æ—Ä—Ç–∞ –∞—Ä—Ö–∏–≤–∞ –≤ Dropbox
  Future<void> exportExample(String localArchivePath) async {
    // 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Dropbox
    final initResult = await _dropboxService.initialize();
    if (!initResult.success) {
      ToastHelper.error(
        title: '–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏',
        description: initResult.message ?? '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Dropbox',
      );
      return;
    }

    // 2. –≠–∫—Å–ø–æ—Ä—Ç –∞—Ä—Ö–∏–≤–∞
    final exportResult = await _dropboxService.export(localArchivePath);

    if (exportResult.success) {
      ToastHelper.success(
        title: '–£—Å–ø–µ—à–Ω–æ',
        description: '–ê—Ä—Ö–∏–≤ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ –æ–±–ª–∞–∫–æ: ${exportResult.data}',
      );

      // 3. –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞—Ä—Ö–∏–≤–æ–≤
      await _showArchivesList();
    } else {
      ToastHelper.error(
        title: '–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞',
        description: exportResult.message ?? '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞—Ä—Ö–∏–≤',
      );
    }
  }

  /// –ü—Ä–∏–º–µ—Ä –∏–º–ø–æ—Ä—Ç–∞ –∞—Ä—Ö–∏–≤–∞ –∏–∑ Dropbox
  Future<String?> importExample(String destinationPath) async {
    // 1. –ò–º–ø–æ—Ä—Ç —Å–∞–º–æ–≥–æ –Ω–æ–≤–æ–≥–æ –∞—Ä—Ö–∏–≤–∞
    final importResult = await _dropboxService.import(destinationPath);

    if (importResult.success) {
      final downloadedPath = importResult.data!;

      ToastHelper.success(
        title: '–£—Å–ø–µ—à–Ω–æ',
        description: '–ê—Ä—Ö–∏–≤ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω',
      );

      // 2. –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Ç—å –∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
      return downloadedPath;
    } else {
      ToastHelper.error(
        title: '–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞',
        description: importResult.message ?? '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞—Ä—Ö–∏–≤',
      );
      return null;
    }
  }

  /// –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∞—Ä—Ö–∏–≤–æ–≤ –≤ –æ–±–ª–∞–∫–µ
  Future<void> _showArchivesList() async {
    final listResult = await _dropboxService.listArchives();

    if (listResult.success && listResult.data != null) {
      final archives = listResult.data!;

      print('=== –ê—Ä—Ö–∏–≤—ã –≤ –æ–±–ª–∞–∫–µ (${archives.length}) ===');
      for (final archive in archives) {
        final sizeKB = (archive.size / 1024).toStringAsFixed(2);
        final date = archive.uploadedAt.toLocal();

        print('üì¶ ${archive.fileName}');
        print('   –†–∞–∑–º–µ—Ä: $sizeKB KB');
        print('   –ó–∞–≥—Ä—É–∂–µ–Ω: $date');
        print('   Checksum: ${archive.checksum.substring(0, 16)}...');
        print('');
      }
    }
  }

  /// –ü—Ä–∏–º–µ—Ä –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π —Å—É–º–º—ã
  Future<bool> verifyArchiveIntegrity(String archivePath) async {
    // –í—ã—á–∏—Å–ª–∏—Ç—å –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—É—é —Å—É–º–º—É
    final checksumResult = await _metadataService.calculateChecksum(
      archivePath,
    );

    if (!checksumResult.success || checksumResult.data == null) {
      print('–û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π —Å—É–º–º—ã');
      return false;
    }

    final checksum = checksumResult.data!;
    print('–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è —Å—É–º–º–∞ —Ñ–∞–π–ª–∞: $checksum');

    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å –æ–∂–∏–¥–∞–µ–º–æ–π (–∏–∑ –æ–±–ª–∞–∫–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä)
    final expectedChecksum = 'some_expected_checksum_here';
    final verifyResult = await _metadataService.verifyChecksum(
      archivePath,
      expectedChecksum,
    );

    return verifyResult.success && verifyResult.data == true;
  }

  /// –ü—Ä–∏–º–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è –∏–º–µ–Ω–∏ –∞—Ä—Ö–∏–≤–∞
  String createArchiveName() {
    final timestamp = DateTime.now().millisecondsSinceEpoch ~/ 1000;
    return _metadataService.generateArchiveName('storage', timestamp);
    // –†–µ–∑—É–ª—å—Ç–∞—Ç: storage_1234567890.zip
  }

  /// –ü—Ä–∏–º–µ—Ä –∏–∑–≤–ª–µ—á–µ–Ω–∏—è timestamp –∏–∑ –∏–º–µ–Ω–∏ –∞—Ä—Ö–∏–≤–∞
  void parseArchiveName(String fileName) {
    final timestamp = _metadataService.parseTimestampFromFileName(fileName);

    if (timestamp != null) {
      final date = DateTime.fromMillisecondsSinceEpoch(timestamp * 1000);
      print('–ê—Ä—Ö–∏–≤ —Å–æ–∑–¥–∞–Ω: $date');
    } else {
      print('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–º–µ–Ω–∏ –∞—Ä—Ö–∏–≤–∞');
    }
  }
}

/// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å Riverpod
/// 
/// // –í providers.dart:
/// final syncMetadataServiceProvider = Provider<SyncMetadataService>((ref) {
///   return SyncMetadataService();
/// });
/// 
/// final dropboxServiceProvider = Provider<DropboxService>((ref) {
///   final client = ref.watch(oauth2ClientProvider);
///   final metadataService = ref.read(syncMetadataServiceProvider);
///   return DropboxService(client, metadataService);
/// });
/// 
/// // –í –≤–∏–¥–∂–µ—Ç–µ:
/// class ExportButton extends ConsumerWidget {
///   final String archivePath;
///   
///   const ExportButton({required this.archivePath});
///   
///   @override
///   Widget build(BuildContext context, WidgetRef ref) {
///     final dropboxService = ref.read(dropboxServiceProvider);
///     
///     return SmoothButton(
///       label: '–≠–∫—Å–ø–æ—Ä—Ç –≤ Dropbox',
///       icon: const Icon(Icons.cloud_upload),
///       onPressed: () async {
///         final result = await dropboxService.export(archivePath);
///         
///         if (result.success) {
///           ToastHelper.success(title: '–ê—Ä—Ö–∏–≤ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ –æ–±–ª–∞–∫–æ');
///         } else {
///           ToastHelper.error(
///             title: '–û—à–∏–±–∫–∞',
///             description: result.message,
///           );
///         }
///       },
///     );
///   }
/// }
